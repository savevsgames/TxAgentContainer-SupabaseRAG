{
  "info": {
    "name": "TxAgent Medical RAG API Tests - Phase 2 Enhanced Intelligence",
    "description": "Comprehensive test collection for TxAgent Hybrid Container with Phase 2 Enhanced Conversation Flow and Advanced NLP capabilities",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "3.2.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://your-txagent-container-url.proxy.runpod.net",
      "type": "string",
      "description": "TxAgent container URL on RunPod"
    },
    {
      "key": "jwt_token",
      "value": "your_supabase_jwt_token_here",
      "type": "string",
      "description": "Valid Supabase JWT token with sub, aud, and role claims"
    },
    {
      "key": "job_id",
      "value": "",
      "type": "string",
      "description": "Embedding job ID from /process-document endpoint"
    },
    {
      "key": "agent_id",
      "value": "",
      "type": "string",
      "description": "Agent session ID from /agents endpoint"
    },
    {
      "key": "symptom_id",
      "value": "",
      "type": "string",
      "description": "Symptom ID from save-symptom endpoint"
    }
  ],
  "item": [
    {
      "name": "1. Health Check - Phase 2 Capabilities",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has Phase 2 capabilities\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('capabilities');",
              "    pm.expect(jsonData.capabilities).to.have.property('phase2_features');",
              "    pm.expect(jsonData.capabilities).to.have.property('advanced_nlp');",
              "    pm.expect(jsonData.capabilities).to.have.property('conversation_management');",
              "    pm.expect(jsonData.capabilities.phase2_features).to.eql(true);",
              "    console.log(`Phase 2 Features: ${jsonData.capabilities.phase2_features}`);",
              "    console.log(`Advanced NLP: ${jsonData.capabilities.advanced_nlp}`);",
              "    console.log(`Conversation Management: ${jsonData.capabilities.conversation_management}`);",
              "});",
              "",
              "pm.test(\"Version is 1.2.0 or higher\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('version');",
              "    var version = jsonData.version;",
              "    pm.expect(version).to.match(/^1\\.[2-9]\\.|^[2-9]\\./);",
              "    console.log(`Version: ${version}`);",
              "});",
              "",
              "console.log(\"✅ Health check successful - TxAgent container with Phase 2 Enhanced Intelligence\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        },
        "description": "Check if the TxAgent container has Phase 2 enhanced intelligence capabilities"
      }
    },
    {
      "name": "2. Phase 2 - Complex Symptom Extraction",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Phase 2 conversation analysis present\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('conversation_analysis');",
              "    pm.expect(jsonData.conversation_analysis).to.have.property('phase');",
              "    pm.expect(jsonData.conversation_analysis.phase).to.eql('2');",
              "    console.log(`Conversation Phase: ${jsonData.conversation_analysis.phase}`);",
              "});",
              "",
              "pm.test(\"Advanced symptom extraction detected\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.intent_detected) {",
              "        pm.expect(jsonData.intent_detected.type).to.eql('log_symptom');",
              "        pm.expect(jsonData.intent_detected.confidence).to.be.above(0.7);",
              "        ",
              "        var data = jsonData.intent_detected.data;",
              "        console.log(`Extracted symptom data: ${JSON.stringify(data)}`);",
              "        ",
              "        // Should extract multiple details from complex description",
              "        if (data.symptom_name) {",
              "            console.log(`✅ Symptom: ${data.symptom_name}`);",
              "        }",
              "        if (data.severity) {",
              "            console.log(`✅ Severity: ${data.severity}/10`);",
              "        }",
              "        if (data.duration_hours) {",
              "            console.log(`✅ Duration: ${data.duration_hours} hours`);",
              "        }",
              "        if (data.location) {",
              "            console.log(`✅ Location: ${data.location}`);",
              "        }",
              "        if (data.quality) {",
              "            console.log(`✅ Quality: ${data.quality}`);",
              "        }",
              "    }",
              "});",
              "",
              "pm.test(\"Enhanced response with medical advice\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.response).to.be.a('string');",
              "    pm.expect(jsonData.response.length).to.be.above(50);",
              "    ",
              "    // Should include severity and medical advice",
              "    pm.expect(jsonData.response.toLowerCase()).to.include('migraine');",
              "    console.log(`Response preview: ${jsonData.response.substring(0, 200)}...`);",
              "});",
              "",
              "console.log(\"✅ Phase 2 complex symptom extraction successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"I've been having this terrible migraine for the past 6 hours. The pain is excruciating, probably a 9 out of 10, and it's concentrated on the left side of my head. It started after I skipped lunch and didn't drink enough water.\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 28,\n      \"gender\": \"female\",\n      \"conditions\": [\"migraine\", \"dehydration sensitivity\"],\n      \"medications\": [\"sumatriptan\"],\n      \"allergies\": [\"aspirin\"]\n    },\n    \"conversation_history\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"Hello, I need help tracking my symptoms\"\n      },\n      {\n        \"role\": \"assistant\",\n        \"content\": \"I'm here to help you track your symptoms. What are you experiencing?\"\n      }\n    ]\n  },\n  \"top_k\": 3,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Test Phase 2 advanced symptom extraction with complex, multi-detail symptom description"
      }
    },
    {
      "name": "3. Phase 2 - Incomplete Information with Follow-up",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Conversation analysis shows follow-up needed\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.conversation_analysis) {",
              "        pm.expect(jsonData.conversation_analysis).to.have.property('follow_up_needed');",
              "        console.log(`Follow-up needed: ${jsonData.conversation_analysis.follow_up_needed}`);",
              "        console.log(`Strategy: ${JSON.stringify(jsonData.conversation_analysis.strategy)}`);",
              "    }",
              "});",
              "",
              "pm.test(\"Response includes intelligent follow-up questions\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.response).to.be.a('string');",
              "    ",
              "    // Should include follow-up questions for missing details",
              "    var response = jsonData.response.toLowerCase();",
              "    var hasFollowUp = response.includes('?') || response.includes('rate') || response.includes('scale') || response.includes('how');",
              "    pm.expect(hasFollowUp).to.eql(true);",
              "    ",
              "    console.log(`Response with follow-up: ${jsonData.response.substring(0, 200)}...`);",
              "});",
              "",
              "pm.test(\"Partial symptom logging detected\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.intent_detected) {",
              "        pm.expect(jsonData.intent_detected.type).to.eql('log_symptom');",
              "        var data = jsonData.intent_detected.data;",
              "        ",
              "        // Should have symptom name but missing other details",
              "        if (data.symptom_name) {",
              "            console.log(`✅ Detected symptom: ${data.symptom_name}`);",
              "        }",
              "        ",
              "        // Should identify missing details",
              "        if (data.missing_details) {",
              "            console.log(`Missing details: ${data.missing_details.join(', ')}`);",
              "        }",
              "        ",
              "        // Should generate follow-up questions",
              "        if (data.follow_up_questions) {",
              "            console.log(`Follow-up questions: ${data.follow_up_questions.join('; ')}`);",
              "        }",
              "    }",
              "});",
              "",
              "console.log(\"✅ Phase 2 incomplete information with follow-up successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"My back has been hurting\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 45,\n      \"gender\": \"male\",\n      \"conditions\": [\"arthritis\"],\n      \"medications\": [\"naproxen\"]\n    },\n    \"conversation_history\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"I want to track my symptoms\"\n      },\n      {\n        \"role\": \"assistant\",\n        \"content\": \"I can help you track your symptoms. What are you experiencing?\"\n      }\n    ]\n  },\n  \"top_k\": 3,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Test Phase 2 handling of incomplete symptom information with intelligent follow-up questions"
      }
    },
    {
      "name": "4. Phase 2 - Emergency Detection",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Emergency response detected\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.response).to.be.a('string');",
              "    ",
              "    var response = jsonData.response.toLowerCase();",
              "    var hasEmergencyIndicators = response.includes('urgent') || response.includes('emergency') || response.includes('911') || response.includes('🚨');",
              "    pm.expect(hasEmergencyIndicators).to.eql(true);",
              "    ",
              "    console.log(`Emergency response: ${jsonData.response.substring(0, 200)}...`);",
              "});",
              "",
              "pm.test(\"Conversation analysis shows emergency strategy\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.conversation_analysis && jsonData.conversation_analysis.strategy) {",
              "        var strategy = jsonData.conversation_analysis.strategy;",
              "        console.log(`Strategy type: ${strategy.type}`);",
              "        console.log(`Priority: ${strategy.priority}`);",
              "        ",
              "        // Should detect emergency or high priority",
              "        if (strategy.priority) {",
              "            pm.expect(strategy.priority).to.be.oneOf(['critical', 'high']);",
              "        }",
              "    }",
              "});",
              "",
              "pm.test(\"Critical symptom logging attempted\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.agent_action) {",
              "        console.log(`Agent action: ${jsonData.agent_action.action}`);",
              "        console.log(`Success: ${jsonData.agent_action.success}`);",
              "        ",
              "        // Should attempt to log the critical symptom",
              "        if (jsonData.agent_action.success && jsonData.agent_action.data) {",
              "            console.log(`Logged critical symptom: ${jsonData.agent_action.data.symptom_name}`);",
              "        }",
              "    }",
              "});",
              "",
              "console.log(\"✅ Phase 2 emergency detection successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"I'm having severe chest pain and I can't breathe properly. This is really scary.\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 55,\n      \"gender\": \"male\",\n      \"conditions\": [\"hypertension\", \"high cholesterol\"],\n      \"medications\": [\"lisinopril\", \"atorvastatin\"]\n    },\n    \"conversation_history\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"I need help, something's wrong\"\n      }\n    ]\n  },\n  \"top_k\": 3,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Test Phase 2 emergency detection for critical symptoms requiring immediate medical attention"
      }
    },
    {
      "name": "5. Phase 2 - Temporal Pattern Recognition",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Advanced temporal extraction\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.intent_detected && jsonData.intent_detected.data) {",
              "        var data = jsonData.intent_detected.data;",
              "        console.log(`Extracted temporal data: ${JSON.stringify(data)}`);",
              "        ",
              "        // Should extract frequency pattern",
              "        if (data.frequency) {",
              "            console.log(`✅ Frequency: ${data.frequency}`);",
              "        }",
              "        ",
              "        // Should extract duration",
              "        if (data.duration_hours) {",
              "            console.log(`✅ Duration: ${data.duration_hours} hours`);",
              "        }",
              "        ",
              "        // Should extract triggers",
              "        if (data.triggers && data.triggers.length > 0) {",
              "            console.log(`✅ Triggers: ${data.triggers.join(', ')}`);",
              "        }",
              "    }",
              "});",
              "",
              "pm.test(\"Response acknowledges pattern\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.response).to.be.a('string');",
              "    ",
              "    var response = jsonData.response.toLowerCase();",
              "    var hasPatternRecognition = response.includes('every') || response.includes('pattern') || response.includes('frequency') || response.includes('trigger');",
              "    ",
              "    console.log(`Response acknowledges pattern: ${hasPatternRecognition}`);",
              "    console.log(`Response preview: ${jsonData.response.substring(0, 200)}...`);",
              "});",
              "",
              "console.log(\"✅ Phase 2 temporal pattern recognition successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"I get these headaches every few days, usually lasting about 4-5 hours. They seem to be triggered by stress and lack of sleep. The pain is typically moderate, around a 6 out of 10.\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 32,\n      \"gender\": \"female\",\n      \"conditions\": [\"tension headaches\"],\n      \"medications\": [\"ibuprofen as needed\"]\n    },\n    \"conversation_history\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"I want to track my headache patterns\"\n      },\n      {\n        \"role\": \"assistant\",\n        \"content\": \"I can help you identify patterns in your headaches. Tell me about them.\"\n      }\n    ]\n  },\n  \"top_k\": 3,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Test Phase 2 temporal pattern recognition for frequency, duration, and triggers"
      }
    },
    {
      "name": "6. Phase 2 - Quality Descriptor Extraction",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Quality descriptors extracted\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.intent_detected && jsonData.intent_detected.data) {",
              "        var data = jsonData.intent_detected.data;",
              "        console.log(`Extracted quality data: ${JSON.stringify(data)}`);",
              "        ",
              "        // Should extract pain quality",
              "        if (data.quality) {",
              "            console.log(`✅ Pain quality: ${data.quality}`);",
              "            pm.expect(data.quality.toLowerCase()).to.include('sharp');",
              "        }",
              "        ",
              "        // Should extract location",
              "        if (data.location) {",
              "            console.log(`✅ Location: ${data.location}`);",
              "        }",
              "        ",
              "        // Should extract symptom name",
              "        if (data.symptom_name) {",
              "            console.log(`✅ Symptom: ${data.symptom_name}`);",
              "        }",
              "    }",
              "});",
              "",
              "pm.test(\"Response includes quality acknowledgment\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.response).to.be.a('string');",
              "    ",
              "    var response = jsonData.response.toLowerCase();",
              "    var hasQualityAcknowledgment = response.includes('sharp') || response.includes('quality') || response.includes('type');",
              "    ",
              "    console.log(`Response includes quality: ${hasQualityAcknowledgment}`);",
              "    console.log(`Response preview: ${jsonData.response.substring(0, 200)}...`);",
              "});",
              "",
              "console.log(\"✅ Phase 2 quality descriptor extraction successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"I have this sharp, stabbing pain in my lower back that comes and goes. It feels like someone is poking me with a needle.\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 40,\n      \"gender\": \"male\",\n      \"conditions\": [\"lower back pain\"],\n      \"medications\": [\"naproxen\"]\n    },\n    \"conversation_history\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"I need to describe my back pain better\"\n      },\n      {\n        \"role\": \"assistant\",\n        \"content\": \"Please describe the pain in detail - what does it feel like?\"\n      }\n    ]\n  },\n  \"top_k\": 3,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Test Phase 2 extraction of pain quality descriptors and characteristics"
      }
    },
    {
      "name": "7. Phase 2 - Conversation History Context",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Conversation context utilized\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.conversation_analysis) {",
              "        console.log(`Conversation stage: ${jsonData.conversation_analysis.flow_analysis?.conversation_stage}`);",
              "        console.log(`Information completeness: ${jsonData.conversation_analysis.flow_analysis?.information_completeness}`);",
              "    }",
              "});",
              "",
              "pm.test(\"Context-aware response\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.response).to.be.a('string');",
              "    ",
              "    var response = jsonData.response.toLowerCase();",
              "    // Should reference previous conversation about nausea",
              "    var hasContextReference = response.includes('nausea') || response.includes('earlier') || response.includes('mentioned');",
              "    ",
              "    console.log(`Context-aware response: ${hasContextReference}`);",
              "    console.log(`Response preview: ${jsonData.response.substring(0, 200)}...`);",
              "});",
              "",
              "pm.test(\"Enhanced symptom extraction from context\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.intent_detected && jsonData.intent_detected.data) {",
              "        var data = jsonData.intent_detected.data;",
              "        console.log(`Context-enhanced extraction: ${JSON.stringify(data)}`);",
              "        ",
              "        // Should connect current query with conversation history",
              "        if (data.symptom_name) {",
              "            console.log(`✅ Symptom from context: ${data.symptom_name}`);",
              "        }",
              "    }",
              "});",
              "",
              "console.log(\"✅ Phase 2 conversation history context successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"It's getting worse and now I feel like I might throw up\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 25,\n      \"gender\": \"female\",\n      \"conditions\": [\"motion sickness\"],\n      \"medications\": [\"dramamine as needed\"]\n    },\n    \"conversation_history\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"I've been feeling nauseous for about an hour\"\n      },\n      {\n        \"role\": \"assistant\",\n        \"content\": \"I've logged your nausea. Can you tell me more about what might have triggered it?\"\n      },\n      {\n        \"role\": \"user\",\n        \"content\": \"I was reading in the car on the way here\"\n      },\n      {\n        \"role\": \"assistant\",\n        \"content\": \"That could definitely trigger motion sickness. How are you feeling now?\"\n      }\n    ]\n  },\n  \"top_k\": 3,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Test Phase 2 utilization of conversation history for context-aware symptom tracking"
      }
    },
    {
      "name": "8. Phase 2 - Medical Advice Integration",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Medical advice included\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.response).to.be.a('string');",
              "    ",
              "    var response = jsonData.response.toLowerCase();",
              "    var hasMedicalAdvice = response.includes('advice') || response.includes('recommend') || response.includes('consider') || response.includes('💡');",
              "    pm.expect(hasMedicalAdvice).to.eql(true);",
              "    ",
              "    console.log(`Medical advice included: ${hasMedicalAdvice}`);",
              "    console.log(`Response preview: ${jsonData.response.substring(0, 300)}...`);",
              "});",
              "",
              "pm.test(\"Safety disclaimer present\", function () {",
              "    var jsonData = pm.response.json();",
              "    var response = jsonData.response.toLowerCase();",
              "    var hasDisclaimer = response.includes('professional') || response.includes('healthcare') || response.includes('medical advice') || response.includes('consult');",
              "    pm.expect(hasDisclaimer).to.eql(true);",
              "    ",
              "    console.log(`Safety disclaimer present: ${hasDisclaimer}`);",
              "});",
              "",
              "pm.test(\"Contextual advice for fever\", function () {",
              "    var jsonData = pm.response.json();",
              "    var response = jsonData.response.toLowerCase();",
              "    var hasFeverAdvice = response.includes('fever') || response.includes('temperature') || response.includes('hydration') || response.includes('rest');",
              "    ",
              "    console.log(`Fever-specific advice: ${hasFeverAdvice}`);",
              "});",
              "",
              "console.log(\"✅ Phase 2 medical advice integration successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"I have a fever of 101.5°F and I'm feeling really weak and tired. This started this morning.\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 30,\n      \"gender\": \"male\",\n      \"conditions\": [],\n      \"medications\": [],\n      \"allergies\": [\"penicillin\"]\n    },\n    \"conversation_history\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"I think I might be getting sick\"\n      },\n      {\n        \"role\": \"assistant\",\n        \"content\": \"I can help you track your symptoms. What are you experiencing?\"\n      }\n    ]\n  },\n  \"top_k\": 3,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Test Phase 2 integration of contextual medical advice with symptom logging"
      }
    },
    {
      "name": "9. Phase 2 - Fallback to Phase 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"System handles fallback gracefully\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.response).to.be.a('string');",
              "    pm.expect(jsonData.response.length).to.be.above(10);",
              "    ",
              "    // Should still detect intent even if Phase 2 components fail",
              "    if (jsonData.intent_detected) {",
              "        console.log(`Intent detected: ${jsonData.intent_detected.type}`);",
              "        console.log(`Confidence: ${jsonData.intent_detected.confidence}`);",
              "    }",
              "    ",
              "    // Should still provide a meaningful response",
              "    console.log(`Response preview: ${jsonData.response.substring(0, 200)}...`);",
              "});",
              "",
              "pm.test(\"Basic symptom logging still works\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.agent_action) {",
              "        console.log(`Agent action: ${jsonData.agent_action.action}`);",
              "        console.log(`Success: ${jsonData.agent_action.success}`);",
              "    }",
              "});",
              "",
              "console.log(\"✅ Phase 2 fallback to Phase 1 successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"I want to log a headache symptom\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 35,\n      \"gender\": \"female\"\n    }\n  },\n  \"top_k\": 3,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Test that Phase 1 functionality still works as fallback when Phase 2 components are unavailable"
      }
    },
    {
      "name": "10. Phase 2 - Performance Benchmark",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response time is acceptable for Phase 2\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(3000); // 3 seconds max for complex processing",
              "    console.log(`Response time: ${pm.response.responseTime}ms`);",
              "});",
              "",
              "pm.test(\"Processing time is reported\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('processing_time');",
              "    pm.expect(jsonData.processing_time).to.be.a('number');",
              "    console.log(`Processing time: ${jsonData.processing_time}ms`);",
              "});",
              "",
              "pm.test(\"Phase 2 features add minimal overhead\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.conversation_analysis) {",
              "        console.log(`Phase 2 conversation management successful with minimal overhead`);",
              "        console.log(`Strategy: ${jsonData.conversation_analysis.strategy?.type}`);",
              "        console.log(`Information completeness: ${jsonData.conversation_analysis.flow_analysis?.information_completeness}`);",
              "    }",
              "});",
              "",
              "pm.test(\"Complex extraction performance\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.intent_detected && jsonData.intent_detected.data) {",
              "        var extractedFields = Object.keys(jsonData.intent_detected.data).length;",
              "        console.log(`Extracted ${extractedFields} fields from complex query`);",
              "        pm.expect(extractedFields).to.be.above(3); // Should extract multiple details",
              "    }",
              "});",
              "",
              "console.log(\"✅ Phase 2 performance benchmark successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"I've been experiencing severe abdominal pain for the past 8 hours. It's a sharp, cramping pain that comes in waves, probably around an 8 out of 10 in severity. It started after I ate some seafood at lunch, and I'm also feeling nauseous and have had some diarrhea.\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 42,\n      \"gender\": \"female\",\n      \"conditions\": [\"IBS\", \"food allergies\"],\n      \"medications\": [\"omeprazole\"],\n      \"allergies\": [\"shellfish\"]\n    },\n    \"conversation_history\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"I think I might have food poisoning\"\n      },\n      {\n        \"role\": \"assistant\",\n        \"content\": \"I'm sorry to hear you're not feeling well. Can you describe your symptoms in detail?\"\n      },\n      {\n        \"role\": \"user\",\n        \"content\": \"I ate at a new restaurant today\"\n      },\n      {\n        \"role\": \"assistant\",\n        \"content\": \"That could be related. What specific symptoms are you experiencing?\"\n      }\n    ]\n  },\n  \"top_k\": 5,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Performance benchmark for Phase 2 with complex, multi-symptom scenario including conversation history"
      }
    },
    {
      "name": "11. Direct Symptom Save Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Symptom saved successfully\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData).to.have.property('symptom_id');",
              "    pm.expect(jsonData).to.have.property('symptom_name');",
              "    pm.expect(jsonData.success).to.eql(true);",
              "    pm.expect(jsonData.symptom_name).to.eql('headache');",
              "    ",
              "    // Store symptom ID for later tests",
              "    pm.collectionVariables.set('symptom_id', jsonData.symptom_id);",
              "    console.log(`Symptom ID: ${jsonData.symptom_id}`);",
              "    console.log(`Message: ${jsonData.message}`);",
              "});",
              "",
              "pm.test(\"Response has symptom data\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('data');",
              "    if (jsonData.data) {",
              "        pm.expect(jsonData.data).to.have.property('symptom_name');",
              "        pm.expect(jsonData.data).to.have.property('severity');",
              "        pm.expect(jsonData.data).to.have.property('location');",
              "        console.log(`Saved symptom: ${jsonData.data.symptom_name}, severity: ${jsonData.data.severity}, location: ${jsonData.data.location}`);",
              "    }",
              "});",
              "",
              "console.log(\"✅ Direct symptom save test successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"symptom_data\": {\n    \"symptom_name\": \"headache\",\n    \"severity\": 7,\n    \"duration_hours\": 4,\n    \"location\": \"forehead\",\n    \"description\": \"Sharp pain in forehead area, started this morning\",\n    \"triggers\": [\"stress\", \"lack of sleep\"]\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/agent-action/save-symptom",
          "host": ["{{base_url}}"],
          "path": ["agent-action", "save-symptom"]
        },
        "description": "Test direct symptom saving via agent action endpoint (Phase 1 functionality)"
      }
    },
    {
      "name": "12. Authentication Failure Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test(\"Response has error message\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('detail');",
              "    console.log(\"Error message: \" + jsonData.detail);",
              "    ",
              "    // Should be a meaningful auth error",
              "    pm.expect(jsonData.detail).to.be.oneOf([",
              "        'Invalid token signature',",
              "        'Token has expired',",
              "        'Invalid token format',",
              "        'Invalid token audience',",
              "        'Authorization header missing'",
              "    ]);",
              "});",
              "",
              "console.log(\"✅ Authentication failure test successful - Phase 2 features properly protected\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer invalid_token_for_testing",
            "description": "Invalid token to test auth failure"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"This should fail due to invalid token\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 30,\n      \"gender\": \"male\"\n    }\n  },\n  \"top_k\": 5,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Test that Phase 2 enhanced chat endpoint is properly protected by authentication"
      }
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script for the entire collection",
          "console.log('🚀 Starting TxAgent Phase 2 Enhanced Intelligence API Tests');",
          "console.log('📋 Testing Features:');",
          "console.log('   - Advanced NLP Processing (contextual symptom extraction)');",
          "console.log('   - Conversation Management (flow analysis and strategy)');",
          "console.log('   - Temporal Pattern Recognition (duration, frequency, triggers)');",
          "console.log('   - Quality Descriptor Extraction (pain types, characteristics)');",
          "console.log('   - Emergency Detection (critical symptom recognition)');",
          "console.log('   - Medical Advice Integration (contextual health guidance)');",
          "console.log('   - Conversation History Context (multi-turn awareness)');",
          "console.log('   - Intelligent Follow-up Questions (missing detail detection)');",
          "console.log('   - Phase 1 Fallback (backward compatibility)');",
          "",
          "// Validate that required variables are set",
          "if (!pm.collectionVariables.get('base_url') || pm.collectionVariables.get('base_url') === 'https://your-txagent-container-url.proxy.runpod.net') {",
          "    console.warn('⚠️ Please update the base_url collection variable with your actual TxAgent container URL');",
          "}",
          "",
          "if (!pm.collectionVariables.get('jwt_token') || pm.collectionVariables.get('jwt_token') === 'your_supabase_jwt_token_here') {",
          "    console.warn('⚠️ Please update the jwt_token collection variable with a valid Supabase JWT token');",
          "    console.warn('   Token must have: sub (user_id), aud: \"authenticated\", role: \"authenticated\"');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Post-response script for the entire collection",
          "// This runs after each request in the collection"
        ]
      }
    }
  ]
}