{
  "info": {
    "name": "TxAgent Medical RAG API Tests - Phase 1 Agent Awareness",
    "description": "Comprehensive test collection for TxAgent Hybrid Container with Phase 1 Agent Awareness features including symptom tracking and intent recognition",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "3.1.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://your-txagent-container-url.proxy.runpod.net",
      "type": "string",
      "description": "TxAgent container URL on RunPod"
    },
    {
      "key": "jwt_token",
      "value": "your_supabase_jwt_token_here",
      "type": "string",
      "description": "Valid Supabase JWT token with sub, aud, and role claims"
    },
    {
      "key": "job_id",
      "value": "",
      "type": "string",
      "description": "Embedding job ID from /process-document endpoint"
    },
    {
      "key": "agent_id",
      "value": "",
      "type": "string",
      "description": "Agent session ID from /agents endpoint"
    },
    {
      "key": "symptom_id",
      "value": "",
      "type": "string",
      "description": "Symptom ID from save-symptom endpoint"
    }
  ],
  "item": [
    {
      "name": "1. Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has status field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData.status).to.eql('healthy');",
              "});",
              "",
              "pm.test(\"Response has agent awareness capabilities\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('capabilities');",
              "    pm.expect(jsonData.capabilities).to.have.property('agent_awareness');",
              "    pm.expect(jsonData.capabilities).to.have.property('intent_recognition');",
              "    pm.expect(jsonData.capabilities).to.have.property('symptom_tracking');",
              "    pm.expect(jsonData.capabilities.agent_awareness).to.eql(true);",
              "    console.log(`Agent Awareness: ${jsonData.capabilities.agent_awareness}`);",
              "    console.log(`Intent Recognition: ${jsonData.capabilities.intent_recognition}`);",
              "    console.log(`Symptom Tracking: ${jsonData.capabilities.symptom_tracking}`);",
              "});",
              "",
              "pm.test(\"Response has Phase 1 endpoints\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('endpoints');",
              "    var endpoints = jsonData.endpoints;",
              "    pm.expect(endpoints).to.include('/agent-action/save-symptom');",
              "    pm.expect(endpoints).to.include('/agent-action/get-symptoms');",
              "    pm.expect(endpoints).to.include('/agent-action/symptom-summary');",
              "    console.log(`Available endpoints: ${endpoints.join(', ')}`);",
              "});",
              "",
              "console.log(\"✅ Health check successful - TxAgent container with Phase 1 Agent Awareness\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        },
        "description": "Check if the TxAgent container is healthy and has Phase 1 agent awareness capabilities"
      }
    },
    {
      "name": "2. Direct Symptom Save Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Symptom saved successfully\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData).to.have.property('symptom_id');",
              "    pm.expect(jsonData).to.have.property('symptom_name');",
              "    pm.expect(jsonData.success).to.eql(true);",
              "    pm.expect(jsonData.symptom_name).to.eql('headache');",
              "    ",
              "    // Store symptom ID for later tests",
              "    pm.collectionVariables.set('symptom_id', jsonData.symptom_id);",
              "    console.log(`Symptom ID: ${jsonData.symptom_id}`);",
              "    console.log(`Message: ${jsonData.message}`);",
              "});",
              "",
              "pm.test(\"Response has symptom data\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('data');",
              "    if (jsonData.data) {",
              "        pm.expect(jsonData.data).to.have.property('symptom_name');",
              "        pm.expect(jsonData.data).to.have.property('severity');",
              "        pm.expect(jsonData.data).to.have.property('location');",
              "        console.log(`Saved symptom: ${jsonData.data.symptom_name}, severity: ${jsonData.data.severity}, location: ${jsonData.data.location}`);",
              "    }",
              "});",
              "",
              "console.log(\"✅ Direct symptom save test successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"symptom_data\": {\n    \"symptom_name\": \"headache\",\n    \"severity\": 7,\n    \"duration_hours\": 4,\n    \"location\": \"forehead\",\n    \"description\": \"Sharp pain in forehead area, started this morning\",\n    \"triggers\": [\"stress\", \"lack of sleep\"]\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/agent-action/save-symptom",
          "host": ["{{base_url}}"],
          "path": ["agent-action", "save-symptom"]
        },
        "description": "Test direct symptom saving via agent action endpoint"
      }
    },
    {
      "name": "3. Direct Symptom Retrieval Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Symptoms retrieved successfully\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('symptoms');",
              "    pm.expect(jsonData).to.have.property('count');",
              "    pm.expect(jsonData.symptoms).to.be.an('array');",
              "    console.log(`Retrieved ${jsonData.count} symptoms`);",
              "});",
              "",
              "pm.test(\"Symptom data structure is correct\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.symptoms.length > 0) {",
              "        var symptom = jsonData.symptoms[0];",
              "        pm.expect(symptom).to.have.property('id');",
              "        pm.expect(symptom).to.have.property('symptom_name');",
              "        pm.expect(symptom).to.have.property('created_at');",
              "        console.log(`Latest symptom: ${symptom.symptom_name} (${symptom.created_at})`);",
              "        ",
              "        if (symptom.severity) {",
              "            console.log(`Severity: ${symptom.severity}/10`);",
              "        }",
              "        if (symptom.location) {",
              "            console.log(`Location: ${symptom.location}`);",
              "        }",
              "    }",
              "});",
              "",
              "pm.test(\"Filters are applied correctly\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('filters');",
              "    pm.expect(jsonData.filters.limit).to.eql(5);",
              "});",
              "",
              "console.log(\"✅ Direct symptom retrieval test successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          }
        ],
        "url": {
          "raw": "{{base_url}}/agent-action/get-symptoms?limit=5",
          "host": ["{{base_url}}"],
          "path": ["agent-action", "get-symptoms"],
          "query": [
            {
              "key": "limit",
              "value": "5"
            }
          ]
        },
        "description": "Test direct symptom retrieval via agent action endpoint"
      }
    },
    {
      "name": "4. Symptom Summary Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Summary data structure is correct\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('total_symptoms');",
              "    pm.expect(jsonData).to.have.property('days_analyzed');",
              "    pm.expect(jsonData).to.have.property('symptom_counts');",
              "    pm.expect(jsonData).to.have.property('recent_patterns');",
              "    console.log(`Total symptoms: ${jsonData.total_symptoms}`);",
              "    console.log(`Days analyzed: ${jsonData.days_analyzed}`);",
              "});",
              "",
              "pm.test(\"Summary includes analysis\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.total_symptoms > 0) {",
              "        pm.expect(jsonData).to.have.property('most_common_symptom');",
              "        pm.expect(jsonData).to.have.property('unique_symptoms');",
              "        console.log(`Most common symptom: ${jsonData.most_common_symptom}`);",
              "        console.log(`Unique symptoms: ${jsonData.unique_symptoms}`);",
              "        ",
              "        if (jsonData.severity_average) {",
              "            console.log(`Average severity: ${jsonData.severity_average}/10`);",
              "        }",
              "        ",
              "        if (jsonData.recent_patterns.length > 0) {",
              "            console.log(`Patterns: ${jsonData.recent_patterns.join(', ')}`);",
              "        }",
              "    }",
              "});",
              "",
              "console.log(\"✅ Symptom summary test successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          }
        ],
        "url": {
          "raw": "{{base_url}}/agent-action/symptom-summary?days_back=30",
          "host": ["{{base_url}}"],
          "path": ["agent-action", "symptom-summary"],
          "query": [
            {
              "key": "days_back",
              "value": "30"
            }
          ]
        },
        "description": "Test symptom summary and analysis endpoint"
      }
    },
    {
      "name": "5. Intent Recognition - Symptom Logging",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Intent recognition detected symptom logging\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('intent_detected');",
              "    pm.expect(jsonData).to.have.property('agent_action');",
              "    ",
              "    if (jsonData.intent_detected) {",
              "        pm.expect(jsonData.intent_detected.type).to.eql('log_symptom');",
              "        pm.expect(jsonData.intent_detected.confidence).to.be.above(0.5);",
              "        console.log(`Intent: ${jsonData.intent_detected.type}, Confidence: ${jsonData.intent_detected.confidence}`);",
              "        console.log(`Extracted data: ${JSON.stringify(jsonData.intent_detected.data)}`);",
              "    }",
              "});",
              "",
              "pm.test(\"Agent action was taken\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.agent_action) {",
              "        pm.expect(jsonData.agent_action.action).to.be.oneOf(['symptom_logged', 'symptom_logging_incomplete']);",
              "        console.log(`Agent action: ${jsonData.agent_action.action}`);",
              "        console.log(`Success: ${jsonData.agent_action.success}`);",
              "        ",
              "        if (jsonData.agent_action.success && jsonData.agent_action.data) {",
              "            console.log(`Logged symptom: ${jsonData.agent_action.data.symptom_name}`);",
              "        }",
              "    }",
              "});",
              "",
              "pm.test(\"Response includes symptom confirmation\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.response).to.include('nausea');",
              "    // Should include confirmation of logging",
              "    if (jsonData.agent_action && jsonData.agent_action.success) {",
              "        pm.expect(jsonData.response).to.include('logged');",
              "    }",
              "});",
              "",
              "console.log(\"✅ Intent recognition for symptom logging successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"I'm experiencing nausea and it's been going on for about 2 hours. The severity is moderate, maybe a 5 out of 10.\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 32,\n      \"gender\": \"female\",\n      \"conditions\": [\"migraine\"],\n      \"medications\": [\"ibuprofen\"]\n    },\n    \"conversation_history\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"Hello, I need to track my symptoms\"\n      },\n      {\n        \"role\": \"assistant\",\n        \"content\": \"I can help you track your symptoms. What are you experiencing?\"\n      }\n    ]\n  },\n  \"top_k\": 3,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Test intent recognition for symptom logging through chat endpoint"
      }
    },
    {
      "name": "6. Intent Recognition - Symptom History",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Intent recognition detected history request\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('intent_detected');",
              "    pm.expect(jsonData).to.have.property('agent_action');",
              "    ",
              "    if (jsonData.intent_detected) {",
              "        pm.expect(jsonData.intent_detected.type).to.eql('get_symptom_history');",
              "        pm.expect(jsonData.intent_detected.confidence).to.be.above(0.5);",
              "        console.log(`Intent: ${jsonData.intent_detected.type}, Confidence: ${jsonData.intent_detected.confidence}`);",
              "    }",
              "});",
              "",
              "pm.test(\"Agent action retrieved history\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.agent_action) {",
              "        pm.expect(jsonData.agent_action.action).to.eql('symptom_history_retrieved');",
              "        console.log(`Agent action: ${jsonData.agent_action.action}`);",
              "        console.log(`Success: ${jsonData.agent_action.success}`);",
              "        ",
              "        if (jsonData.agent_action.success && jsonData.agent_action.data) {",
              "            console.log(`Found ${jsonData.agent_action.data.count} symptoms in history`);",
              "        }",
              "    }",
              "});",
              "",
              "pm.test(\"Response includes history information\", function () {",
              "    var jsonData = pm.response.json();",
              "    // Should include information about found symptoms",
              "    if (jsonData.agent_action && jsonData.agent_action.success) {",
              "        pm.expect(jsonData.response).to.include('found');",
              "    }",
              "});",
              "",
              "console.log(\"✅ Intent recognition for symptom history successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"Can you show me my symptom history from the last week?\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 32,\n      \"gender\": \"female\",\n      \"conditions\": [\"migraine\"],\n      \"medications\": [\"ibuprofen\"]\n    },\n    \"conversation_history\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"I logged some symptoms earlier\"\n      },\n      {\n        \"role\": \"assistant\",\n        \"content\": \"Yes, I can help you review your symptom history.\"\n      }\n    ]\n  },\n  \"top_k\": 3,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Test intent recognition for symptom history retrieval through chat endpoint"
      }
    },
    {
      "name": "7. Implicit Symptom Detection",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Intent recognition detected implicit symptom\", function () {",
              "    var jsonData = pm.response.json();",
              "    ",
              "    // May detect as log_symptom with lower confidence or general_chat",
              "    if (jsonData.intent_detected) {",
              "        console.log(`Intent: ${jsonData.intent_detected.type}, Confidence: ${jsonData.intent_detected.confidence}`);",
              "        console.log(`Extracted data: ${JSON.stringify(jsonData.intent_detected.data)}`);",
              "        ",
              "        if (jsonData.intent_detected.type === 'log_symptom') {",
              "            pm.expect(jsonData.intent_detected.confidence).to.be.above(0.3);",
              "        }",
              "    }",
              "});",
              "",
              "pm.test(\"Response is contextually appropriate\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.response).to.be.a('string');",
              "    pm.expect(jsonData.response.length).to.be.above(10);",
              "    ",
              "    // Should mention back pain in some way",
              "    pm.expect(jsonData.response.toLowerCase()).to.include('back');",
              "});",
              "",
              "console.log(\"✅ Implicit symptom detection test successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"My back has been hurting since yesterday\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 45,\n      \"gender\": \"male\",\n      \"conditions\": [\"arthritis\"],\n      \"medications\": [\"naproxen\"]\n    }\n  },\n  \"top_k\": 3,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Test implicit symptom detection (less explicit symptom mention)"
      }
    },
    {
      "name": "8. General Chat (No Intent)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"No specific intent detected\", function () {",
              "    var jsonData = pm.response.json();",
              "    ",
              "    if (jsonData.intent_detected) {",
              "        pm.expect(jsonData.intent_detected.type).to.eql('general_chat');",
              "        pm.expect(jsonData.intent_detected.confidence).to.eql(0.0);",
              "        console.log(`Intent: ${jsonData.intent_detected.type}, Confidence: ${jsonData.intent_detected.confidence}`);",
              "    }",
              "});",
              "",
              "pm.test(\"No agent action taken\", function () {",
              "    var jsonData = pm.response.json();",
              "    // Should not have agent_action for general chat",
              "    if (jsonData.agent_action) {",
              "        console.log(`Unexpected agent action: ${jsonData.agent_action.action}`);",
              "    }",
              "});",
              "",
              "pm.test(\"Response is appropriate for general query\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.response).to.be.a('string');",
              "    pm.expect(jsonData.response.length).to.be.above(10);",
              "    console.log(`Response preview: ${jsonData.response.substring(0, 100)}...`);",
              "});",
              "",
              "console.log(\"✅ General chat (no intent) test successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"What is the weather like today?\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 30,\n      \"gender\": \"female\"\n    }\n  },\n  \"top_k\": 3,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Test that non-medical queries don't trigger symptom intents"
      }
    },
    {
      "name": "9. Complex Symptom Extraction",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Complex symptom data extracted\", function () {",
              "    var jsonData = pm.response.json();",
              "    ",
              "    if (jsonData.intent_detected && jsonData.intent_detected.type === 'log_symptom') {",
              "        var data = jsonData.intent_detected.data;",
              "        console.log(`Extracted symptom data: ${JSON.stringify(data)}`);",
              "        ",
              "        // Should extract multiple pieces of information",
              "        if (data.symptom_name) {",
              "            console.log(`Symptom: ${data.symptom_name}`);",
              "        }",
              "        if (data.severity) {",
              "            console.log(`Severity: ${data.severity}/10`);",
              "        }",
              "        if (data.duration_hours) {",
              "            console.log(`Duration: ${data.duration_hours} hours`);",
              "        }",
              "        if (data.location) {",
              "            console.log(`Location: ${data.location}`);",
              "        }",
              "    }",
              "});",
              "",
              "pm.test(\"Agent successfully logged complex symptom\", function () {",
              "    var jsonData = pm.response.json();",
              "    ",
              "    if (jsonData.agent_action && jsonData.agent_action.action === 'symptom_logged') {",
              "        pm.expect(jsonData.agent_action.success).to.eql(true);",
              "        console.log(`Successfully logged: ${jsonData.agent_action.data.symptom_name}`);",
              "    }",
              "});",
              "",
              "console.log(\"✅ Complex symptom extraction test successful\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"I've been having a terrible migraine for the past 6 hours. The pain is excruciating, probably a 9 out of 10, and it's concentrated on the left side of my head. It started after I skipped lunch and didn't drink enough water.\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 28,\n      \"gender\": \"female\",\n      \"conditions\": [\"migraine\", \"dehydration sensitivity\"],\n      \"medications\": [\"sumatriptan\"],\n      \"allergies\": [\"aspirin\"]\n    }\n  },\n  \"top_k\": 3,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Test extraction of complex symptom information with multiple details"
      }
    },
    {
      "name": "10. Authentication Failure Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test(\"Response has error message\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('detail');",
              "    console.log(\"Error message: \" + jsonData.detail);",
              "    ",
              "    // Should be a meaningful auth error",
              "    pm.expect(jsonData.detail).to.be.oneOf([",
              "        'Invalid token signature',",
              "        'Token has expired',",
              "        'Invalid token format',",
              "        'Invalid token audience',",
              "        'Authorization header missing'",
              "    ]);",
              "});",
              "",
              "console.log(\"✅ Authentication failure test successful - agent actions properly protected\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer invalid_token_for_testing",
            "description": "Invalid token to test auth failure"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"symptom_data\": {\n    \"symptom_name\": \"test_symptom\",\n    \"severity\": 5\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/agent-action/save-symptom",
          "host": ["{{base_url}}"],
          "path": ["agent-action", "save-symptom"]
        },
        "description": "Test that agent action endpoints are properly protected by authentication"
      }
    },
    {
      "name": "11. RLS Isolation Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"RLS properly isolates user data\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('symptoms');",
              "    pm.expect(jsonData).to.have.property('count');",
              "    ",
              "    // Should only return symptoms for the authenticated user",
              "    console.log(`User can see ${jsonData.count} symptoms (RLS working)`);",
              "    ",
              "    // All symptoms should belong to the current user (verified by RLS)",
              "    if (jsonData.symptoms.length > 0) {",
              "        jsonData.symptoms.forEach((symptom, index) => {",
              "            pm.expect(symptom).to.have.property('id');",
              "            pm.expect(symptom).to.have.property('symptom_name');",
              "            console.log(`Symptom ${index + 1}: ${symptom.symptom_name} (${symptom.created_at})`);",
              "        });",
              "    }",
              "});",
              "",
              "console.log(\"✅ RLS isolation test successful - user data properly protected\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "Valid token - should only see own symptoms"
          }
        ],
        "url": {
          "raw": "{{base_url}}/agent-action/get-symptoms?limit=10",
          "host": ["{{base_url}}"],
          "path": ["agent-action", "get-symptoms"],
          "query": [
            {
              "key": "limit",
              "value": "10"
            }
          ]
        },
        "description": "Test that RLS properly isolates symptom data by user"
      }
    },
    {
      "name": "12. Performance Benchmark",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response time is acceptable\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(5000); // 5 seconds max",
              "    console.log(`Response time: ${pm.response.responseTime}ms`);",
              "});",
              "",
              "pm.test(\"Processing time is reported\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('processing_time');",
              "    pm.expect(jsonData.processing_time).to.be.a('number');",
              "    console.log(`Processing time: ${jsonData.processing_time}ms`);",
              "});",
              "",
              "pm.test(\"Intent recognition is fast\", function () {",
              "    var jsonData = pm.response.json();",
              "    // Intent recognition should add minimal overhead",
              "    if (jsonData.intent_detected) {",
              "        console.log(`Intent detection successful with minimal overhead`);",
              "        console.log(`Intent: ${jsonData.intent_detected.type}, Confidence: ${jsonData.intent_detected.confidence}`);",
              "    }",
              "});",
              "",
              "console.log(\"✅ Performance benchmark successful - Phase 1 features are performant\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "description": "JWT token for authentication"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"I want to log a fever symptom that I've had for 2 days\",\n  \"context\": {\n    \"user_profile\": {\n      \"age\": 35,\n      \"gender\": \"male\",\n      \"conditions\": [\"hypertension\"],\n      \"medications\": [\"lisinopril\"]\n    },\n    \"conversation_history\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"Hello\"\n      },\n      {\n        \"role\": \"assistant\",\n        \"content\": \"Hello! How can I help you today?\"\n      }\n    ]\n  },\n  \"top_k\": 5,\n  \"temperature\": 0.7\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        },
        "description": "Performance benchmark for Phase 1 agent awareness features"
      }
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script for the entire collection",
          "console.log('🚀 Starting TxAgent Phase 1 Agent Awareness API Tests');",
          "console.log('📋 Testing Features:');",
          "console.log('   - Intent Recognition (symptom logging, history requests)');",
          "console.log('   - Agent Actions (save/retrieve symptoms)');",
          "console.log('   - Symptom Data Extraction (name, severity, duration, location)');",
          "console.log('   - Database Operations with RLS');",
          "console.log('   - Chat Integration with Agent Actions');",
          "console.log('   - Authentication and Security');",
          "",
          "// Validate that required variables are set",
          "if (!pm.collectionVariables.get('base_url') || pm.collectionVariables.get('base_url') === 'https://your-txagent-container-url.proxy.runpod.net') {",
          "    console.warn('⚠️ Please update the base_url collection variable with your actual TxAgent container URL');",
          "}",
          "",
          "if (!pm.collectionVariables.get('jwt_token') || pm.collectionVariables.get('jwt_token') === 'your_supabase_jwt_token_here') {",
          "    console.warn('⚠️ Please update the jwt_token collection variable with a valid Supabase JWT token');",
          "    console.warn('   Token must have: sub (user_id), aud: \"authenticated\", role: \"authenticated\"');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Post-response script for the entire collection",
          "// This runs after each request in the collection"
        ]
      }
    }
  ]
}