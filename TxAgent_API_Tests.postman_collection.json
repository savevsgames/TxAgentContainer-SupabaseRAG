{
  "info": {
    "name": "TxAgent API Tests - Complete",
    "description": "Complete test collection for TxAgent Hybrid Container including agent management",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://bjo5yophw94s7b-8000.proxy.runpod.net",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "your_supabase_jwt_token_here",
      "type": "string"
    },
    {
      "key": "job_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "agent_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has status field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData.status).to.eql('healthy');",
              "});",
              "",
              "pm.test(\"Response has model info\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('model');",
              "    pm.expect(jsonData).to.have.property('device');",
              "    pm.expect(jsonData).to.have.property('version');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        }
      }
    },
    {
      "name": "2. Test GET Endpoint",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has message\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.include('GET endpoint working');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/test",
          "host": ["{{base_url}}"],
          "path": ["test"]
        }
      }
    },
    {
      "name": "3. Test POST Endpoint",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has message\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.include('POST endpoint working');",
              "});",
              "",
              "pm.test(\"Response echoes sent data\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('received_data');",
              "    pm.expect(jsonData.received_data.test).to.eql('data');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"test\": \"data\",\n  \"timestamp\": \"2025-01-01T00:00:00Z\",\n  \"user\": \"postman_test\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/test",
          "host": ["{{base_url}}"],
          "path": ["test"]
        }
      }
    },
    {
      "name": "4. Create Agent Session (Requires Auth)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has agent ID\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.collectionVariables.set('agent_id', jsonData.id);",
              "});",
              "",
              "pm.test(\"Response has status\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData.status).to.eql('active');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"session_data\": {\n    \"container_url\": \"https://bjo5yophw94s7b-8000.proxy.runpod.net\",\n    \"capabilities\": [\"embedding\", \"chat\"],\n    \"model\": \"dmis-lab/biobert-v1.1\",\n    \"created_by\": \"postman_test\"\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/agents",
          "host": ["{{base_url}}"],
          "path": ["agents"]
        }
      }
    },
    {
      "name": "5. Get Active Agent (Requires Auth)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has agent info\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('agent');",
              "    if (jsonData.agent) {",
              "        pm.expect(jsonData.agent).to.have.property('id');",
              "        pm.expect(jsonData.agent).to.have.property('status');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/agents/active",
          "host": ["{{base_url}}"],
          "path": ["agents", "active"]
        }
      }
    },
    {
      "name": "6. Create Test Document (Requires Auth)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 202\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 202]);",
              "});",
              "",
              "pm.test(\"Response has job_id\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('job_id');",
              "    pm.collectionVariables.set('job_id', jsonData.job_id);",
              "});",
              "",
              "pm.test(\"Response has status\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData.status).to.be.oneOf(['pending', 'processing', 'completed']);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"file_path\": \"test-documents/sample-medical-paper.pdf\",\n  \"metadata\": {\n    \"title\": \"Sample Medical Research Paper\",\n    \"author\": \"Dr. Test Author\",\n    \"category\": \"cardiology\",\n    \"year\": \"2024\",\n    \"source\": \"postman_test\",\n    \"content\": \"This is a test document about cardiovascular health. Hypertension is a common condition that affects millions of people worldwide. Treatment options include lifestyle modifications such as diet and exercise, as well as medications like ACE inhibitors, beta blockers, and diuretics. Regular monitoring of blood pressure is essential for effective management.\"\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/embed",
          "host": ["{{base_url}}"],
          "path": ["embed"]
        }
      }
    },
    {
      "name": "7. Get Job Status (Requires Auth)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 404\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    pm.test(\"Response has job status\", function () {",
              "        var jsonData = pm.response.json();",
              "        pm.expect(jsonData).to.have.property('status');",
              "        pm.expect(jsonData).to.have.property('job_id');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/embedding-jobs/{{job_id}}",
          "host": ["{{base_url}}"],
          "path": ["embedding-jobs", "{{job_id}}"]
        }
      }
    },
    {
      "name": "8. Chat Query (Requires Auth)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has answer\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('response');",
              "    pm.expect(jsonData).to.have.property('status');",
              "});",
              "",
              "pm.test(\"Response has sources array\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('sources');",
              "    pm.expect(jsonData.sources).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"What are the treatment options for hypertension?\",\n  \"history\": [],\n  \"top_k\": 5,\n  \"temperature\": 0.7,\n  \"stream\": false\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        }
      }
    },
    {
      "name": "9. Chat Query - No Results Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response indicates no results or provides answer\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('response');",
              "    pm.expect(jsonData).to.have.property('status');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"What is the weather like on Mars today?\",\n  \"history\": [],\n  \"top_k\": 3,\n  \"temperature\": 0.5\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        }
      }
    },
    {
      "name": "10. Terminate Agent Session (Requires Auth)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 404\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    pm.test(\"Response has success message\", function () {",
              "        var jsonData = pm.response.json();",
              "        pm.expect(jsonData).to.have.property('message');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/agents/{{agent_id}}",
          "host": ["{{base_url}}"],
          "path": ["agents", "{{agent_id}}"]
        }
      }
    },
    {
      "name": "11. Test Authentication Failure",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test(\"Response has error message\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('detail');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer invalid_token"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"This should fail due to invalid token\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat",
          "host": ["{{base_url}}"],
          "path": ["chat"]
        }
      }
    }
  ]
}